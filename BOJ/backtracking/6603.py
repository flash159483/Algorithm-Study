# 6603
# silver 2

# 독일 로또는 {1, 2, ..., 49}에서 수 6개를 고른다.
#
# 로또 번호를 선택하는데 사용되는 가장 유명한 전략은 49가지 수 중 k(k>6)개의 수를 골라 집합 S를 만든 다음 그 수만 가지고 번호를 선택하는 것이다.
#
# 예를 들어, k=8, S={1,2,3,5,8,13,21,34}인 경우 이 집합 S에서 수를 고를 수 있는 경우의 수는 총 28가지이다. ([1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ..., [3,5,8,13,21,34])
#
# 집합 S와 k가 주어졌을 때, 수를 고르는 모든 방법을 구하는 프로그램을 작성하시오.

# Example
# Input:
# 7 1 2 3 4 5 6 7
# 8 1 2 3 5 8 13 21 34
# 0

# 1 2 3 4 5 6
# 1 2 3 4 5 7
# 1 2 3 4 6 7
# 1 2 3 5 6 7
# 1 2 4 5 6 7
# 1 3 4 5 6 7
# 2 3 4 5 6 7
# 
# 1 2 3 5 8 13
# 1 2 3 5 8 21
# 1 2 3 5 8 34
# 1 2 3 5 13 21
# 1 2 3 5 13 34
# 1 2 3 5 21 34
# 1 2 3 8 13 21
# 1 2 3 8 13 34
# 1 2 3 8 21 34
# 1 2 3 13 21 34
# 1 2 5 8 13 21
# 1 2 5 8 13 34
# 1 2 5 8 21 34
# 1 2 5 13 21 34
# 1 2 8 13 21 34
# 1 3 5 8 13 21
# 1 3 5 8 13 34
# 1 3 5 8 21 34
# 1 3 5 13 21 34
# 1 3 8 13 21 34
# 1 5 8 13 21 34
# 2 3 5 8 13 21
# 2 3 5 8 13 34
# 2 3 5 8 21 34
# 2 3 5 13 21 34
# 2 3 8 13 21 34
# 2 5 8 13 21 34
# 3 5 8 13 21 34

def dfs(path, index):
    if len(path) == 6:
        print(*path)
        return

    for i in range(index, len(m)):
        dfs(path + [m[i]], i+1)


while True:
    n, *m = map(int, input().split())
    if n == 0:
        break

    dfs([], 0)
    print()